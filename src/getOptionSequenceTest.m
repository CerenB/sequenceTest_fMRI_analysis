% (C) Copyright 2019 CPP BIDS SPM-pipeline developpers

function opt = getOptionCategBlock()
    % opt = getOption()
    % returns a structure that contains the options chosen by the user to run
    % slice timing correction, pre-processing, FFX, RFX.

    if nargin < 1
        opt = [];
    end

    % group of subjects to analyze
    opt.groups = {''};
    % suject to run in each group
    opt.subjects = {'001'};

    % we stay in native space (that of the T1)
    opt.space = 'T1w';

    % The directory where the data are located
    opt.dataDir = fullfile(fileparts(mfilename('fullpath')), ...
                           '..', '..', '..',  'raw');

    % task to analyze
    opt.taskName = 'RhythmCategBlock';

    % Suffix output directory for the saved jobs
    opt.jobsDir = fullfile( ...
                           opt.dataDir, '..', 'derivatives', ...
                           'SPM12_CPPL', 'JOBS', opt.taskName);

    % specify the model file that contains the contrasts to compute
    opt.model.univariate.file =  ...
        fullfile(fileparts(mfilename('fullpath')), '..', ...
                 'model', 'model-RhythmCategBlock_smdl.json');

    opt.model.multivariate.file = '';

    % specify the result to compute
    % Contrasts.Name has to match one of the contrast defined in the model json file
    %     opt.result.Steps(1) = struct( ...
    %         'Level',  'dataset', ...
    %         'Contrasts', struct( ...
    %                         'Name', 'AllSounds', ... %
    %                         'Mask', false, ... % this might need improving if a mask is required
    %                         'MC', 'none', ... FWE, none, FDR
    %                         'p', 0.001, ...
    %                         'k', 0, ...
    %                         'NIDM', true));

    % Options for slice time correction
    % If left unspecified the slice timing will be done using the mid-volume acquisition
    % time point as reference.
    % Slice order must be entered in time unit (s) (this is the BIDS way of doing things)
    % instead of the slice index of the reference slice (the "SPM" way of doing things).
    % More info here: https://en.wikibooks.org/wiki/SPM/Slice_Timing
    %     opt.sliceOrder = [0;1.3000;0.0590;1.3591;0.1181;1.4182;0.1772;1.4773; ...
    %                         0.2363;1.5363;0.2954;1.5954;0.3545;1.6545;0.4136; ...
    %                         1.7136;0.4727;1.7727;0.5318;1.8318;0.5909;1.8909; ...
    %                         0.6500;1.9500;0.7091;2.0091;0.7681;2.0682;0.8272; ...
    %                         2.1272;0.8863;2.1863;0.9454;2.2454;1.0045;2.3045; ...
    %                         1.0636;2.3636;1.1227;2.4227;1.1818;2.4818;1.2409; ...
    %                         2.5409];
    %  opt.sliceOrder = [0; 1.47250000000000; 0.0588999000000000; ...
    %                       1.53140000000000; 0.117800000000000; 1.59030000000000; ...
    %                       0.176700000000000; 1.64920000000000; 0.235600000000000; ...
    %                       1.70810000000000; 0.294500000000000; 1.76700000000000; ...
    %                       0.353400000000000; 1.82590000000000; 0.412300000000000; ...
    %                       1.88480000000000; 0.471200000000000; 1.94370000000000; ...
    %                       0.530100000000000; 2.00260000000000; 0.589000000000000; ...
    %                       2.06150000000000; 0.647900000000000; 2.12040000000000; ...
    %                       0.706800000000000; 2.17930000000000; 0.765700000000000; ...
    %                       2.23820000000000; 0.824600000000000; 2.29710000000000; ...
    %                       0.883500000000000; 2.35600000000000; 0.942400000000000; ...
    %                       2.41490000000000; 1.00130000000000; 2.47380000000000; ...
    %                       1.06020000000000; 2.53270000000000; 1.11910000000000; ...
    %                       2.59160000000000; 1.17800000000000; 2.65050000000000; ...
    %                       1.23690000000000; 2.70940000000000; 1.29580000000000; ...
    %                       2.76830000000000; 1.35470000000000; 2.82720000000000; ...
    %                       1.41360000000000; 2.88610000000000];
    opt.sliceOrder = [0; 1.3549; 0.0588999; 1.4138; 0.1178; 1.4728; 0.1767; 1.5317; ...
                      0.2356; 1.5906; 0.2945; 1.6495; 0.3534; 1.7084; 0.4123; ...
                      1.7673; 0.4712; 1.8262; 0.5302; 1.8851; 0.5891; 1.944; ...
                      0.648; 2.003; 0.7069; 2.0619; 0.7658; 2.1208; 0.8247; ...
                      2.1797; 0.8836; 2.2386; 0.9425; 2.2975; 1.0015; 2.3564; ...
                      1.0604; 2.4153; 1.1193; 2.4742; 1.1782; 2.5331; 1.2371; ...
                      2.592; 1.296];

    opt.STC_referenceSlice = [];

    % Options for normalize
    % Voxel dimensions for resampling at normalization of functional data or leave empty [ ].
    opt.funcVoxelDims = [2.7 2.7 2.7];
    opt.space = 'MNI';

    %     % Save the opt variable as a mat file to load directly in the preprocessing
    %     % scripts
    %     save('opt.mat', 'opt');

end
